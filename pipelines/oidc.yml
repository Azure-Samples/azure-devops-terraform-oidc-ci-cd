# NOTE: Support for Terraform in Azure DevOps OIDC is still in private preview. You'll need to get access to the preview to use this pipeline.

trigger: 
- main

variables:
  - name: workingDirectory
    value: terraform-example-deploy

stages:
- stage: validate
  displayName: Validation
  condition: eq(variables['Build.Reason'], 'PullRequest')
  jobs:
    - job: 
      displayName: Validate Terraform
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'
      - pwsh: terraform fmt -check
        displayName: Terraform Format Check
        workingDirectory: $(workingDirectory)
      - pwsh: terraform init -backend=false
        displayName: Terraform Init
        workingDirectory: $(workingDirectory)
      - pwsh: terraform validate
        displayName: Terraform Validate
        workingDirectory: $(workingDirectory)
      
- stage: deploy_to_dev
  displayName: Deploy to Dev
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
    - group: dev
    - name: serviceConnection
      value: service_connection_dev
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(workingDirectory)'
                backendServiceArm: '${{ variables.serviceConnection }}'
                backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
                backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
                backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
                backendAzureRmKey: 'terraform.tfstate'
              env:
                ARM_USE_AZUREAD: true # This environment variable tells the backend to use AzureAD auth rather than trying a create a key. It means we can limit the permissions applied to the storage account and container to least priviledge: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm#use_azuread_auth
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(workingDirectory)'
                commandOptions: '-auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"'
                environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
              env:
                ARM_USE_AZUREAD: true
            
            ### The follow is an example of using the Jason Johnson task instead of DevLabs
            # - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            #   displayName: Install Terraform
            #   inputs:
            #     terraformVersion: 'latest'
            # - task: TerraformCLI@1
            #   inputs:
            #     command: 'init'
            #     workingDirectory: '$(workingDirectory)'
            #     backendType: 'azurerm'
            #     backendServiceArm: '${{ variables.serviceConnection }}'
            #     backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
            #     backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
            #     backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
            #     backendAzureRmKey: 'terraform.tfstate'
            #     allowTelemetryCollection: true
            #   env:
            #     ARM_USE_AZUREAD: true
            # - task: TerraformCLI@1
            #   inputs:
            #     command: 'apply'
            #     workingDirectory: '$(workingDirectory)'
            #     environmentServiceName: '${{ variables.serviceConnection }}'
            #     commandOptions: '-auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"'
            #     allowTelemetryCollection: true
            #   env:
            #     ARM_USE_AZUREAD: true

            ### The following task shows an example of using OIDC outside of one of the Terraform tasks, should you need something very specific and custom that is not supported by the tasks yet. ###
            #- task: AzureCLI@2
            #  displayName: Terraform Init and Apply
            #  inputs:
            #    azureSubscription: '${{ variables.serviceConnection }}'
            #    scriptType: pscore
            #    scriptLocation: inlineScript
            #    inlineScript: |
            #      ./../scripts/set_terraform_azurerm_vars.ps1
            #      terraform init -backend-config=storage_account_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) -backend-config=resource_group_name=$(BACKEND_AZURE_RESOURCE_GROUP_NAME)
            #      terraform apply --auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"     
            #    useGlobalConfig: true
            #    addSpnToEnvironment: true # This flag is required to set the idToken environment variable.
            #    failOnStandardError: true
            #    workingDirectory: $(workingDirectory)  
            #  env:
            #    ARM_USE_AZUREAD: true    

- stage: deploy_to_test
  displayName: Deploy to Test
  condition: and(not(or(failed(), canceled())), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: deploy_to_dev
  variables:
    - group: test
    - name: serviceConnection
      value: service_connection_test
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(workingDirectory)'
                backendServiceArm: '${{ variables.serviceConnection }}'
                backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
                backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
                backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
                backendAzureRmKey: 'terraform.tfstate'
              env:
                ARM_USE_AZUREAD: true
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(workingDirectory)'
                commandOptions: '-auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"'
                environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
              env:
                ARM_USE_AZUREAD: true

- stage: deploy_to_prod
  displayName: Deploy to Prod
  condition: and(not(or(failed(), canceled())), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: deploy_to_test
  variables:
    - group: prod
    - name: serviceConnection
      value: service_connection_prod
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: prod
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(workingDirectory)'
                backendServiceArm: '${{ variables.serviceConnection }}'
                backendAzureRmResourceGroupName: '$(BACKEND_AZURE_RESOURCE_GROUP_NAME)'
                backendAzureRmStorageAccountName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)'
                backendAzureRmContainerName: '$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)'
                backendAzureRmKey: 'terraform.tfstate'
              env:
                ARM_USE_AZUREAD: true
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(workingDirectory)'
                commandOptions: '-auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"'
                environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
              env:
                ARM_USE_AZUREAD: true