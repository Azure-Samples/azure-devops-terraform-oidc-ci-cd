# NOTE: Support for Terraform in Azure DevOps OIDC is still in private preview. You'll need to get access to the preview to use this pipeline.

trigger: 
- main

variables:
  - name: workingDirectory
    value: terraform-example-deploy

stages:
- stage: validate
  displayName: Validation
  condition: eq(variables['Build.Reason'], 'PullRequest')
  jobs:
    - job: 
      displayName: Validate Terraform
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'
      - pwsh: terraform fmt -check
        displayName: Terraform Format Check
        workingDirectory: $(workingDirectory)
      - pwsh: terraform init
        displayName: Terraform Init
        workingDirectory: $(workingDirectory)
      - pwsh: terraform validate
        displayName: Terraform Validate
        workingDirectory: $(workingDirectory)
      
- stage: deploy_to_dev
  displayName: Deploy to Dev
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
    - group: dev
    - name: serviceConnection
      value: service_connection_dev
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: AzureCLI@2
              displayName: Terraform Init and Apply
              inputs:
                azureSubscription: '${{ variables.serviceConnection }}'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  ./../scripts/set_terraform_azurerm_vars.ps1 -Token $(System.AccessToken)
                  terraform init -backend-config=storage_account_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) -backend-config=resource_group_name=$(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                  terraform apply --auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"     
                useGlobalConfig: true
                addSpnToEnvironment: true
                failOnStandardError: true
                workingDirectory: $(workingDirectory)      

- stage: deploy_to_test
  displayName: Deploy to Test
  condition: ne(variables['Build.Reason'], 'PullRequest')
  dependsOn: deploy_to_dev
  variables:
    - group: test
    - name: serviceConnection
      value: service_connection_test
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: AzureCLI@2
              displayName: Terraform Init and Apply
              inputs:
                azureSubscription: '${{ variables.serviceConnection }}'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  ./../scripts/set_terraform_azurerm_vars.ps1 -Token $(System.AccessToken)
                  terraform init -backend-config=storage_account_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) -backend-config=resource_group_name=$(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                  terraform apply --auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"     
                useGlobalConfig: true
                addSpnToEnvironment: true
                failOnStandardError: true
                workingDirectory: $(workingDirectory) 

- stage: deploy_to_prod
  displayName: Deploy to Prod
  condition: ne(variables['Build.Reason'], 'PullRequest')
  dependsOn: deploy_to_test
  variables:
    - group: prod
    - name: serviceConnection
      value: service_connection_prod
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: prod
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: AzureCLI@2
              displayName: Terraform Init and Apply
              inputs:
                azureSubscription: '${{ variables.serviceConnection }}'
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  ./../scripts/set_terraform_azurerm_vars.ps1 -Token $(System.AccessToken)
                  terraform init -backend-config=storage_account_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) -backend-config=container_name=$(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) -backend-config=resource_group_name=$(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                  terraform apply --auto-approve -var="resource_group_name=$(AZURE_RESOURCE_GROUP_NAME)"     
                useGlobalConfig: true
                addSpnToEnvironment: true
                failOnStandardError: true
                workingDirectory: $(workingDirectory) 