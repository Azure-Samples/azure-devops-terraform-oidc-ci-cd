---
parameters:
  - name: terraform_action
    default: 'apply'
  - name: environment
    default: All
  - name: environments
    type: object
    default: []
  - name: root_module_folder_relative_path
    default: '.'

stages:
- ${{ each environment in parameters.environments }}:
  - ${{ if or(eq(environment.name, parameters.environment), eq(parameters.environment, 'All')) }}:
    - stage: ${{ environment.name }}_plan
      displayName: ${{ environment.display_name }} Plan
      variables:
        - group: ${{ environment.variable_group_name }}
      jobs:
        - deployment: plan
          displayName: Plan with Terraform
          pool:
            ${{ if eq(environment.agent_pool_type, 'self-hosted') }}:
              name: ${{ environment.agent_pool_name }}
            ${{ if eq(environment.agent_pool_type, 'microsoft-hosted') }}:
              vmImage: ${{ environment.agent_pool_name }}
          environment: ${{ environment.environment_name }}
          timeoutInMinutes: 0
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                    displayName: Checkout Terraform Module
                  - template: helpers/terraform-installer.yaml
                    parameters:
                      terraformVersion: 'latest'
                  - template: helpers/terraform-init.yaml
                    parameters:
                      serviceConnection: ${{ environment.service_connection_name_plan }}
                      backendAzureResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                      backendAzureStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                      backendAzureStorageAccountContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
                  - template: helpers/terraform-plan.yaml
                    parameters:
                      terraform_action: ${{ parameters.terraform_action }}
                      serviceConnection: ${{ environment.service_connection_name_plan }}
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
                      additionalVariables: $(ADDITIONAL_ENVIRONMENT_VARIABLES)
                  - task: CopyFiles@2
                    displayName: Create Module Artifact
                    inputs:
                      SourceFolder: '$(Build.SourcesDirectory)'
                      Contents: |
                        **/*
                        !.terraform/**/*
                        !.git/**/*
                        !.pipelines/**/*
                        !**/.terraform/**/*
                        !**/.git/**/*
                        !**/.pipelines/**/*
                      TargetFolder: '$(Build.ArtifactsStagingDirectory)'
                      CleanTargetFolder: true
                      OverWrite: true
                  - task: PublishPipelineArtifact@1
                    displayName: Publish Module Artifact
                    inputs:
                      targetPath: '$(Build.ArtifactsStagingDirectory)'
                      artifact: 'module_${{ environment.name }}'
                      publishLocation: 'pipeline'
                  - pwsh: |
                      terraform `
                      -chdir="${{ parameters.root_module_folder_relative_path }}" `
                      show `
                      tfplan
                    displayName: Show the Plan for Review
    
  - ${{ if or(eq(environment.name, parameters.environment), eq(parameters.environment, 'All')) }}:
    - stage: ${{ environment.name }}_apply
      displayName: ${{environment.display_name }} Apply
      variables:
        - group: ${{ environment.variable_group_name }}
      jobs:
        - deployment: apply
          displayName: Apply with Terraform
          pool:
            ${{ if eq(environment.agent_pool_type, 'self-hosted') }}:
              name: ${{ environment.agent_pool_name }}
            ${{ if eq(environment.agent_pool_type, 'microsoft-hosted') }}:
              vmImage: ${{ environment.agent_pool_name }}
          environment: ${{ environment.environment_name }}
          timeoutInMinutes: 0
          strategy:
            runOnce:
              deploy:
                steps:
                  - download: none
                  - task: DownloadPipelineArtifact@2
                    displayName: Download Module Artifact
                    inputs:
                      buildType: 'current'
                      artifactName: 'module_${{ environment.name }}'
                      targetPath: '$(Build.SourcesDirectory)'
                  - template: helpers/terraform-installer.yaml
                    parameters:
                      terraformVersion: 'latest'
                  - template: helpers/terraform-init.yaml
                    parameters:
                      serviceConnection: ${{ environment.service_connection_name_apply }}
                      backendAzureResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                      backendAzureStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                      backendAzureStorageAccountContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
                  - template: helpers/terraform-apply.yaml
                    parameters:
                      terraform_action: ${{ parameters.terraform_action }}
                      serviceConnection: ${{ environment.service_connection_name_apply }}
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
