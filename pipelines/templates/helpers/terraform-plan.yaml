---
parameters:
  - name: terraform_action
    default: 'apply'
  - name: serviceConnection
  - name: root_module_folder_relative_path
    default: '.'
  - name: additionalVariables
    default: '{}'
  - name: varFilePath
    default: ''

steps:
  - task: AzureCLI@2
    displayName: Terraform Plan for ${{ coalesce(parameters.terraform_action, 'Apply') }}
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $additionalVariables = ConvertFrom-Json '${{ parameters.additionalVariables }}'
        foreach($var in $additionalVariables.PSObject.Properties) {
          if($var.Name.StartsWith("TF_VAR_")) {
            Write-Host "Setting: $($var.Name) = $($var.Value)"
            [System.Environment]::SetEnvironmentVariable($var.Name, $var.Value)
          }
        }

        $varFilePath = "${{ parameters.varFilePath }}"

        # Get settings from service connection
        az account show 2>$null | ConvertFrom-Json | Set-Variable account

        # Logout of Azure CLI to prove we are not using that auth method
        az logout

        $clientId = $account.user.name
        $subscriptionId = $account.id
        $tenantId = $account.tenantId

        $env:ARM_TENANT_ID = $account.tenantId
        $env:ARM_SUBSCRIPTION_ID = $account.id
        $env:ARM_CLIENT_ID = $clientId
        $env:ARM_OIDC_AZURE_SERVICE_CONNECTION_ID = $env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID
        $env:ARM_OIDC_REQUEST_URL = $env:SYSTEM_OIDCREQUESTURI  # Temporary fix for AzAPI issue (https://github.com/Azure/terraform-provider-azapi/pull/852)
        $env:ARM_USE_OIDC = "true"
        $env:ARM_USE_AZUREAD = "true"

        # Run Terraform Plan
        $command = "terraform"
        $arguments = @()
        $arguments += "-chdir=${{ parameters.root_module_folder_relative_path }}"
        $arguments += "plan"

        if($varFilePath -ne "") {
          $arguments += "-var-file=$varFilePath"
        }

        $arguments += "-out=tfplan"
        $arguments += "-input=false"

        if ($env:TERRAFORM_ACTION -eq 'destroy') {
          $arguments += "-destroy"
        }

        Write-Host "Running: $command $arguments"
        & $command $arguments

    env:
      TERRAFORM_ACTION: ${{ coalesce(parameters.terraform_action, 'apply') }}
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
