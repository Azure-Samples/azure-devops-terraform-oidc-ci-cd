---
parameters:
  - name: environments
    type: object
    default: []
  - name: root_module_folder_relative_path
    default: '.'
  - name: terraform_cli_version
    default: 'latest'

stages:
  - stage: validate
    displayName: Validation Terraform
    jobs:
      - job: validate
        displayName: Validate Terraform
        pool:
          ${{ if eq(parameters.environments[0].agent_pool_type, 'self-hosted') }}:
            name: ${{ parameters.environments[0].agent_pool_name }}
          ${{ if eq(parameters.environments[0].agent_pool_type, 'microsoft-hosted') }}:
            vmImage: ${{ parameters.environments[0].agent_pool_name }}
        steps:
          - template: helpers/terraform-installer.yaml
            parameters:
              terraformVersion: ${{ parameters.terraform_cli_version }}
          - pwsh: |
              terraform `
              -chdir="${{ parameters.root_module_folder_relative_path }}" `
              fmt `
              -check
            displayName: Terraform Format Check
          - pwsh: |
              terraform `
              -chdir="${{ parameters.root_module_folder_relative_path }}" `
              init `
              -backend=false
            displayName: Terraform Init
          - pwsh: |
              terraform `
              -chdir="${{ parameters.root_module_folder_relative_path }}" `
              validate
            displayName: Terraform Validate

      - ${{ each environment in parameters.environments }}:
        - deployment: ${{ environment.name }}_plan
          variables:
            - group: ${{ environment.variable_group_name }}
          dependsOn: validate
          displayName: Validate Terraform Plan for ${{ environment.display_name }}
          pool:
            ${{ if eq(environment.agent_pool_type, 'self-hosted') }}:
              name: ${{ environment.agent_pool_name }}
            ${{ if eq(environment.agent_pool_type, 'microsoft-hosted') }}:
              vmImage: ${{ environment.agent_pool_name }}
          environment: ${{ environment.environment_name }}
          timeoutInMinutes: 0
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                    displayName: Checkout Terraform Module
                  - template: helpers/terraform-installer.yaml
                    parameters:
                      terraformVersion: ${{ parameters.terraform_cli_version }}
                  - template: helpers/terraform-init.yaml
                    parameters:
                      serviceConnection: ${{ environment.service_connection_name_plan }}
                      backendAzureResourceGroupName: $(BACKEND_AZURE_RESOURCE_GROUP_NAME)
                      backendAzureStorageAccountName: $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME)
                      backendAzureStorageAccountContainerName: $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME)
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
                  - template: helpers/terraform-plan.yaml
                    parameters:
                      serviceConnection: ${{ environment.service_connection_name_plan }}
                      root_module_folder_relative_path: ${{ parameters.root_module_folder_relative_path }}
                      additionalVariables: $(ADDITIONAL_ENVIRONMENT_VARIABLES)
                      varFilePath: $(VAR_FILE_PATH)
                  - pwsh: |
                      terraform -chdir="${{ parameters.root_module_folder_relative_path }}" show -json tfplan > tfplan.json
                      $planJson = Get-Content -Raw tfplan.json
                      $planObject = ConvertFrom-Json $planJson -Depth 100

                      $items = @{}
                      foreach($change in $planObject.resource_changes) {
                        $key = [System.String]::Join("-", $change.change.actions)
                        if(!$items.ContainsKey($key)) {
                          $items[$key] = 0
                        }
                        $items[$key]++
                      }
                      
                      Write-Host "Plan Summary"
                      Write-Host (ConvertTo-Json $items -Depth 10)
                    displayName: Terraform Plan Summary
                  - task: PublishPipelineArtifact@1
                    displayName: Publish Plan Artifact
                    inputs:
                      targetPath: 'tfplan.json'
                      artifact: 'plan_${{ environment.name }}'
                      publishLocation: 'pipeline'
