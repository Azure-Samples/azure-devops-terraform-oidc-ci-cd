trigger: none

stages:
- stage: validate
  displayName: Validation
  condition: eq(variables['Build.Reason'], 'PullRequest')
  jobs:
    - job: 
      displayName: Validate Terraform
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'
      - pwsh: terraform fmt -check
        displayName: Terraform Format Check
      - pwsh: terraform init
        displayName: Terraform Init
      - pwsh: terraform validate
        displayName: Terraform Validate
      
- stage: deploy_to_dev
  displayName: Deploy to Dev
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
    - group: dev
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: ${{ variables.SERVICE_CONNECTION_NAME }}
                backendAzureRmResourceGroupName: ${{ variables.BACKEND_AZURE_RESOURCE_GROUP_NAME }}
                backendAzureRmStorageAccountName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}
                backendAzureRmContainerName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}
                backendAzureRmKey: terraform.tfstate
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '-auto-approve -var="resource_group_name=${{ variables.AZURE_RESOURCE_GROUP_NAME }}"'
                environmentServiceNameAzureRM: ${{ variables.SERVICE_CONNECTION_NAME }}
      
- stage: deploy_to_test
  displayName: Deploy to Test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: deploy_to_dev
  pool: 
        vmImage: ubuntu-latest 
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: ${{ variables.SERVICE_CONNECTION_NAME }}
                backendAzureRmResourceGroupName: ${{ variables.BACKEND_AZURE_RESOURCE_GROUP_NAME }}
                backendAzureRmStorageAccountName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}
                backendAzureRmContainerName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}
                backendAzureRmKey: terraform.tfstate
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '-auto-approve -var="resource_group_name=${{ variables.AZURE_RESOURCE_GROUP_NAME }}"'
                environmentServiceNameAzureRM: ${{ variables.SERVICE_CONNECTION_NAME }}

- stage: deploy_to_prod
  displayName: Deploy to Prod
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: deploy_to_test
  variables:
    - group: prod
  jobs:
    - deployment: deploy
      displayName: Deploy with Terraform
      pool: 
        vmImage: ubuntu-latest 
      environment: prod
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              displayName: Checkout Terraform Module
            - task: TerraformInstaller@0
              displayName: Install Terraform
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: Terraform Init
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: ${{ variables.SERVICE_CONNECTION_NAME }}
                backendAzureRmResourceGroupName: ${{ variables.BACKEND_AZURE_RESOURCE_GROUP_NAME }}
                backendAzureRmStorageAccountName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}
                backendAzureRmContainerName: ${{ variables.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}
                backendAzureRmKey: terraform.tfstate
            - task: TerraformTaskV4@4
              displayName: Terraform Apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '-auto-approve -var="resource_group_name=${{ variables.AZURE_RESOURCE_GROUP_NAME }}"'
                environmentServiceNameAzureRM: ${{ variables.SERVICE_CONNECTION_NAME }}